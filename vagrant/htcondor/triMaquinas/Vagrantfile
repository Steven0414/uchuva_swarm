cluster = {
    :controller => {
        :hostname => "controller",
        :ipaddress => "10.10.10.3",
        :type => "controller"
    },
    :server1 => {
        :hostname => "server1",
        :ipaddress => "10.10.10.4",
        :type => "node"
    },
    :server2 => {
        :hostname => "server2",
        :ipaddress => "10.10.10.5",
        :type => "node"
    },
}
## vagrant plugin install hostnames
# Problemas
# Docker => Condor y Vagrant no alcanzan a agregarse como usuarios del grupo condor
Vagrant.configure("2") do |global_config|
  cluster.each_pair do |name, options|
    global_config.vm.define name do |config|
      config.vm.box = "puppetlabs/centos-7.2-64-puppet"
      config.vm.hostname = "#{name}"
      config.vm.synced_folder "../../../prototipo", "/app"
      config.vm.network :public_network, ip: options[:ipaddress]
      config.vm.provision :hosts, :sync_hosts => true
      config.vm.provision "shell", path: "installscript.sh"

      config.vm.provider :virtualbox do |v|
        v.customize ["modifyvm", :id, "--memory", "512"]
      end

      if options[:type] == "controller"
        config.vm.network "forwarded_port", guest: 80, host: 3000
        config.vm.provision :puppet do |puppet|
          puppet.environment = "production"
          puppet.environment_path = "puppet/environments"
          puppet.manifest_file  = "controller.pp"
          puppet.manifests_path = "puppet/manifests"
          puppet.module_path = "puppet/modules"
          puppet.options = "--verbose --debug"
          # puppet.hiera_config_path = "hiera.yaml"
        end
      elsif options[:type] == "node"
        config.vm.provision :puppet do |puppet|
	  puppet.environment = "production"
          puppet.environment_path = "puppet/environments"
          puppet.manifest_file  = "node.pp"
          puppet.manifests_path = "puppet/manifests"
          puppet.module_path = "puppet/modules"
          puppet.options = "--verbose --debug"
        end
      end
    end
  end
end
